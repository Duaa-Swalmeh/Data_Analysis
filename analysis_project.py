# -*- coding: utf-8 -*-
"""Analysis_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WhzOK04QwWucBsrQ8WNU7vngE3biufP3

#
Undertand top50 Data
"""

import pandas as pd
df=pd.read_csv("/content/insurance.csv")

df.head()

df.info()

df.describe()

df.columns

"""#Data Cleaning"""

df.duplicated().sum()

df.drop_duplicates(inplace=True)

df.shape

df.isna().sum()

df["sex"].value_counts()

df["smoker"].value_counts()

df["region"].value_counts()

df.to_csv("/content/silver_insurance.csv",index=False)

"""#EDA"""

df=pd.read_csv("/content/silver_insurance.csv")

df.head()

df.isna().sum()

df_num=df.select_dtypes(include=["float64","int64"])

df_num.head()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import norm


# Set the visual style
sns.set_style("whitegrid")
sns.set_palette("deep")

# Define the number of columns and calculate rows dynamically
n_cols = 2  # Number of plots per row
n_rows = (len(df_num.columns) + n_cols - 1) // n_cols  # Calculate required rows

# Create the main figure
fig, axes = plt.subplots(n_rows, n_cols, figsize=(10, 6))  # Adjust overall size

# Flatten the axes array for easier indexing
axes = axes.flatten()

# Plotting
for i, col in enumerate(df_num.columns):
    # Extract column data
    data = df_num[col]

    # Fit the normal distribution
    mean, std = norm.fit(data)

    # Generate x values for the curve
    x = np.linspace(data.min(), data.max(), 1000)
    y = norm.pdf(x, mean, std)

    # Plot histogram and the fitted curve
    sns.histplot(data, kde=False, stat="density", bins=30, color="darkblue", ax=axes[i], label="Data Histogram")
    axes[i].plot(x, y, color="pink", label=f"Normal Fit ($\mu={mean:.2f}, \sigma={std:.2f}$)")

    # Add titles and labels
    axes[i].set_title(f"Normal Fit for {col}")
    axes[i].set_xlabel(f"{col} Values")
    axes[i].set_ylabel("Density")
    axes[i].legend()

# Remove empty axes if any
for j in range(i + 1, len(axes)):
    fig.delaxes(axes[j])

# Improve layout
plt.tight_layout()
plt.show()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


# Prepare scatter plots for all column pairs
columns = df_num.columns
n_cols = 2  # Number of plots per row
n_rows = (len(columns) * (len(columns) - 1)) // (2 * n_cols) + 1  # Calculate rows needed

# Create the main figure
fig, axes = plt.subplots(n_rows, n_cols, figsize=(12, 8), constrained_layout=True)
axes = axes.flatten()

# Plotting scatter plots for each pair
index = 0
for i, col1 in enumerate(columns):
    for j, col2 in enumerate(columns):
        if i < j:  # Ensure unique pairs
            # Scatter plot
            axes[index].scatter(df_num[col1], df_num[col2], color="red", alpha=0.7)

            # Add titles and labels
            axes[index].set_title(f"{col1} vs {col2}", color="black")
            axes[index].set_xlabel(col1, color="black")
            axes[index].set_ylabel(col2, color="black")

            index += 1

# Remove any unused axes
for k in range(index, len(axes)):
    fig.delaxes(axes[k])

# Display the plot
plt.show()

df_cat = df.select_dtypes(include=["object"])

df_cat.head()

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt


# Define the number of columns for the layout
n_cols = 2  # Number of plots per row
n_rows = (len(df_cat.columns) + n_cols - 1) // n_cols  # Calculate rows dynamically

# Create the figure and axes
fig, axes = plt.subplots(n_rows, n_cols, figsize=(10, 6))
axes = axes.flatten()

# Plot bar charts for each categorical column
for i, col in enumerate(df_cat.columns):
    counts = df_cat[col].value_counts()  # Count the frequency of each category

    # Create the bar chart
    axes[i].bar(counts.index, counts.values, color=["#FF6F61", "#6B5B95", "#88B04B"])  # Attractive colors

    # Add titles and labels
    axes[i].set_title(f"Bar Chart for {col}", fontsize=12)
    axes[i].set_xlabel("Category", fontsize=10)
    axes[i].set_ylabel("Count", fontsize=10)

# Remove unused axes
for j in range(i + 1, len(axes)):
    fig.delaxes(axes[j])

# Adjust layout for clarity
plt.tight_layout()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Define the number of columns for the layout
n_cols = 2  # Number of plots per row
n_rows = (len(df_cat.columns) + n_cols - 1) // n_cols  # Calculate rows dynamically

# Create the figure and axes
fig, axes = plt.subplots(n_rows, n_cols, figsize=(12, 8))
axes = axes.flatten()

# Plot pie charts for each categorical column
for i, col in enumerate(df_cat.columns):
    counts = df_cat[col].value_counts()  # Get category counts

    # Create the pie chart
    axes[i].pie(counts.values, labels=counts.index, autopct="%1.1f%%", startangle=90,
                colors=plt.cm.Paired.colors)
    axes[i].set_title(f"Pie Chart for {col}")

# Remove unused axes
for j in range(i + 1, len(axes)):
    fig.delaxes(axes[j])

# Adjust layout for clarity
plt.tight_layout()
plt.show()